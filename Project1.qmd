---
title: "Project1"
author: Alexis Kolecki, Jessie Heise
date: 6/17/2025
format: pdf
editor: visual
---
```{r, global_options, include = FALSE}
install.packages("formatR", repos = "http://cran.rstudio.com")
library(formatR)
knitr::opts_chunk$set(message = FALSE, tidy.opts=list(width.cutoff=40),tidy=TRUE)
```
## Data Processing

### Step 1

```{r, message = FALSE, warning = FALSE}
# Load libraries
library(dplyr)
library(tidyr)

# Read in EDU01a.csv data
first_data <- read.csv('EDU01a.csv')

# Select only the following columns: Area_name (rename as area_name), 
#STCOU, any column that ends in "D"
selected_columns <- first_data |> 
  select(area_name = Area_name, STCOU, ends_with("D"))

# Display the first 5 rows of the new data set
head(selected_columns, n = 5)
```

### Step 2

```{r, message = FALSE, warning = FALSE}
# Convert data into long format
#Each row only has one enrollment value for that Area_name
pivoted_data <- selected_columns |>
  pivot_longer(cols=3:12,names_to="Enrollment", values_to ="Enrollment_Value") |>
  select(-STCOU) #drop the STCOU column since we aren't using it

# Display first 5 rows of the new data set
head(pivoted_data, n = 5)
```

### Step 3

```{r, message = FALSE, warning = FALSE}
# Separate enrollment variable
long_updated <- pivoted_data |>
   mutate(Survey = substr(Enrollment, 1,7), #pull measurement info
          Year = as.numeric(substr(Enrollment, 8,9))) |> #pull yr/make numeric
  mutate(Year=ifelse(Year>80, 1900+Year,2000+Year)) |> #format year to four digits
  select(area_name, Survey, Year, Enrollment_Value)

# Display first 5 rows of new data set
head(long_updated, n = 5)
```

### Step 4

```{r, message = FALSE, warning = FALSE}
# Create two new data sets: one with only county data and one with only non-county data
county_tibble <- long_updated|>
  filter(grepl(",",area_name)) |> 
  mutate(county=grep(pattern =", \\w\\w", area_name))

class(county_tibble) <- c("county", class(county_tibble))


state_tibble <- long_updated|>
  filter(!grepl(",",area_name)) 

class(state_tibble) <- c("state", class(state_tibble))

# Print the first 10 rows of the county tibble
head(county_tibble, n = 10)

# Print the first 10 rows of the state tibble
head(state_tibble, n = 10)
```

### Step 5

```{r, message = FALSE, warning = FALSE}
# Creating a new variable that describes which state 
#one of these county measurements corresponds to
county_tibble <-county_tibble |>
  mutate(state = substr(area_name, nchar(area_name)-2, nchar(area_name)))
```

### Step 6

```{r, message = FALSE, warning = FALSE}
# Creating a variable called division for non-county level tibble
state_tibble <- state_tibble |>
  mutate(division = case_when(
    area_name %in% c("CONNECTICUT","MAINE","MASSACHUSETTS",
                     "NEW HAMPSHIRE","RHODE ISLAND","VERMONT") ~ "New England",
    area_name %in% c("NEW JERSEY","NEW YORK","PENNSYLVANIA") ~ "Mid-Atlantic",
    area_name %in% c("ILLINOIS","INDIANA","MICHIGAN",
                     "OHIO","WISCONSIN") ~ "East North Central",
    area_name %in% c("IOWA","KANSAS","MINNESOTA","MISSOURI",
                     "NEBRASKA","NORTH DAKOTA",
                     "SOUTH DAKOTA") ~ "West North Central",
    area_name %in% c("DELAWARE","DISTRICT OF COLUMBIA",
                     "FLORIDA","GEORGIA","MARYLAND","NORTH CAROLINA",
                     "SOUTH CAROLINA","VIRGINIA","WEST VIRGINIA") ~ "South Atlantic",
    area_name %in% c("ALABAMA","KENTUCKY","MISSISSIPPI",
                     "TENNESSEE") ~ "East South Central",
    area_name %in% c("ARKANSAS","LOUISIANA","OKLAHOMA",
                     "TEXAS") ~ "West South Central",
    area_name %in% c("ARIZONA","COLORADO","IDAHO",
                     "MONTANA","NEVADA","NEW MEXICO","UTAH","WYOMING") ~ "Mountain",
    area_name %in% c("ALASKA","CALIFORNIA","HAWAII","OREGON",
                     "WASHINGTON") ~ "Pacific",
    TRUE ~ "ERROR"
    )
  )
```

## Data Processing Function Writing

### Write one function that does steps 1 & 2 above

```{r, message = FALSE, warning = FALSE, results = "hide"}
# Function for reading in code
read_csv_code <- function(filename,column_name){
  library(dplyr)
  library(tidyr)
  first_data <- read.csv(filename)
  return(first_data)
}

# Function for steps 1 and 2  
function_for_steps_1_2 <- function(first_data, column_name){
  selected_columns <- first_data |> 
    select(area_name = Area_name, STCOU, ends_with("D"))
  pivoted_data <- selected_columns |>
    pivot_longer(cols=3:12,names_to=column_name, values_to ="Enrollment_Value") |>
    select(-STCOU)
  print(pivoted_data)
  return(pivoted_data)
}
```

### Write a function that takes in the output of step 2 and does step 3 above

```{r, message = FALSE, warning = FALSE}
# Function taking in the output from step 2 and executing step 3
function_for_step_3 <- function(pivoted_data,column_name){
  long_updated <- pivoted_data |>
    mutate(Survey = substr(pivoted_data[[column_name]], 1,7), 
           Year = as.numeric(substr(pivoted_data[[column_name]], 8,9))) |>
    mutate(Year=ifelse(Year>50, 1900+Year,2000+Year)) |>
    select(area_name, Survey, Year, Enrollment_Value)
  return(long_updated)
}
```

### Write a function to do step 5

```{r, message = FALSE, warning = FALSE}
# Function for step 4 (need before step 5)
function_for_step_4 <- function(long_updated){
  county_tibble <- long_updated|>
    filter(grepl(",",area_name)) |> 
    mutate(county=grep(pattern =", \\w\\w", area_name))
  class(county_tibble) <- c("county", class(county_tibble))
  state_tibble <- long_updated|>
    filter(!grepl(",",area_name)) 
  class(state_tibble) <- c("state", class(state_tibble))
  return(list=c(county_tibble, state_tibble))
}

# Function for step 5
function_for_step_5 <- function(county_tibble){
  county_tibble <-county_tibble |>
  mutate(state = substr(area_name, nchar(area_name)-2, nchar(area_name)))
  return(county_tibble)
}
```

### Write a function to do step 6

```{r, message = FALSE, warning = FALSE}
# Function for step 6
function_for_step_6 <- function(state_tibble){
  state_tibble <- state_tibble |>
  mutate(division = case_when(
    area_name %in% c("CONNECTICUT","MAINE","MASSACHUSETTS",
                     "NEW HAMPSHIRE","RHODE ISLAND","VERMONT") ~ "New England",
    area_name %in% c("NEW JERSEY","NEW YORK","PENNSYLVANIA") ~ "Mid-Atlantic",
    area_name %in% c("ILLINOIS","INDIANA","MICHIGAN",
                     "OHIO","WISCONSIN") ~ "East North Central",
    area_name %in% c("IOWA","KANSAS","MINNESOTA","MISSOURI",
                     "NEBRASKA","NORTH DAKOTA","SOUTH DAKOTA") ~ "West North Central",
    area_name %in% c("DELAWARE","DISTRICT OF COLUMBIA","FLORIDA",
                     "GEORGIA","MARYLAND","NORTH CAROLINA","SOUTH CAROLINA",
                     "VIRGINIA","WEST VIRGINIA") ~ "South Atlantic",
    area_name %in% c("ALABAMA","KENTUCKY","MISSISSIPPI",
                     "TENNESSEE") ~ "East South Central",
    area_name %in% c("ARKANSAS","LOUISIANA","OKLAHOMA",
                     "TEXAS") ~ "West South Central",
    area_name %in% c("ARIZONA","COLORADO","IDAHO","MONTANA",
                     "NEVADA","NEW MEXICO","UTAH","WYOMING") ~ "Mountain",
    area_name %in% c("ALASKA","CALIFORNIA","HAWAII","OREGON",
                     "WASHINGTON") ~ "Pacific",
    TRUE ~ "ERROR"
    )
  )
  return(state_tibble)
}
```

### Write a function that takes the output from step 3 and creates the two tibbles in step 4, calls the above two functions to perform steps 5 and 6, and returns two final tibbles

```{r, message = FALSE, warning = FALSE}
# Function for steps 4, 5, 6
function_for_steps_4_5_6 <- function(long_updated){
  county_tibble <- long_updated|>
    filter(grepl(",",area_name)) |> 
    mutate(county=grep(pattern =", \\w\\w", area_name))
  class(county_tibble) <- c("county", class(county_tibble))
  state_tibble <- long_updated|>
    filter(!grepl(",",area_name)) 
  class(state_tibble) <- c("state", class(state_tibble))
  results5 <- function_for_step_5(county_tibble)
  results6 <- function_for_step_6(state_tibble)
  return(list=c(county_data =results5, state_data =results6))
}
```

### Put the above functions into a wrapper function

```{r, message = FALSE, warning = FALSE}
# Wrapper function that takes in the URL of a .csv file and the optional argument 
#for the variable name, calls the functions written above, and returns two tibbles
processing_wrapper <- function(url,column_name){
  result <- read_csv_code(url) |>
    (\(data)function_for_steps_1_2(data,column_name))() |>
    (\(data)function_for_step_3(data,column_name))() |>
    function_for_steps_4_5_6()
  return(result)
}
```

### Write Combining Function

```{r, message = FALSE, warning = FALSE, results = "hide"}
# Combining Function with minimum 2 and maximum 4 input datasets
CombiningFunction <- function(data1,data2,data3 = NULL,data4 = NULL){
  input <- list(data1,data2,data3,data4)
  county_data <- bind_rows(input[[1]][1:6],input[[2]][1:6],
                           input[[3]][1:6],input[[4]][1:6])
  noncounty_data <- bind_rows(input[[1]][7:11],input[[2]][7:11],
                              input[[3]][7:11],input[[4]][7:11])
    combined <- list(county_data=tibble(county_data),
                     noncounty_data=tibble(noncounty_data))
  return(combined)
}

```

## Writing a Generic Function for Summarizing

### Plot Function for State Data

```{r, message = FALSE, warning = FALSE, results = "hide"}
#Plot function for state data
library(ggplot2)
plot.state <- function(df,var_name="state_data.Enrollment_Value"){
  plot_data <- df|> group_by(state_data.division, state_data.Year)|>
    summarize(y_axis=mean(get(var_name))) |>
    filter(state_data.division != 'ERROR') 
   
  print(plot_data)
  ggplot(data=plot_data, 
         aes(x=state_data.Year,y= y_axis,color=state_data.division)) + 
    geom_line() +
    labs(y="Average Enrollment", x="Year", color="Division")
}


```

### Plot Function for County Data

```{r, message = FALSE, warning = FALSE, results = "hide"}
#Plot function for county data
plot.county <- function(df,var_name="county_data.Enrollment_Value", 
                        state = ' AL' , order='Top', n=5){
  plot_data <- df |> 
    filter(county_data.state== state) |>
    group_by(county_data.area_name) |>
    summarize(y_axis=mean(get(var_name))) 

#if else for the top or bottom parameter
  if(order=='Top'){
    plot_data2 <- plot_data |>
      arrange(desc(y_axis)) |>
      slice_head(n= n)
  }
  else {
    plot_data2 <- plot_data |>
      arrange(y_axis)|>
      slice_head(n= n)
  }
  
  print(plot_data2)
  ggplot(data=plot_data2, aes(x=county_data.area_name,y= y_axis/1000, group = 1)) + 
    #divide y-axis values by 1000 so that the y-axis labels are more readable
    geom_point() + #create scatterplot
    labs(y="Average Enrollment (in thousands)", x="County") + 
    scale_x_discrete(guide = guide_axis(n.dodge = 2)) 
  #stagger x-axis labels so no overlap
}


```

## Putting it Together

### Running Original Enrollment Data

```{r, message = FALSE, warning = FALSE}
EDU01a <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv",
                             'Enrollment')
EDU01b <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv",
                             'Enrollment')

EDU01ab<-CombiningFunction(EDU01a, EDU01b)

plot.state(EDU01ab[[2]])
plot.county(EDU01ab[[1]], state =' NC', order = 'Top', n = 20)
plot.county(EDU01ab[[1]], state = ' SC', order = 'Bottom', n = 7)
plot.county(EDU01ab[[1]])
plot.county(EDU01ab[[1]], state = ' PA', order = 'Top', n = 8)
```

### Run Data Processing Function on Four Other Data Sets

```{r, message = FALSE, warning = FALSE}
PST01a <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv",
                             'Enrollment')
PST01b <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv",
                             'Enrollment')
PST01c <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv",
                             'Enrollment')
PST01d <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv",
                             'Enrollment')

PST01abcd <- CombiningFunction(PST01a, PST01b, PST01c, PST01d)
```

### Plot Other Data Sets with Plot Function

```{r, message = FALSE, warning = FALSE}
plot.state(PST01abcd[[2]])
plot.county(PST01abcd[[1]], state =' CA', order = 'Top', n = 15)
plot.county(PST01abcd[[1]], state = ' TX', order = 'Top', n = 4)
plot.county(PST01abcd[[1]])
plot.county(PST01abcd[[1]], state = ' NY', order = 'Top', n = 10)
```

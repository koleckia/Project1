---
title: "Project1"
format: pdf
editor: visual
---

## Data Processing

### Step 1

```{r}
library(dplyr)
library(tidyr)

# Read in data
first_data <- read.csv('EDU01a.csv')

# Select columns
selected_columns <- first_data |> 
  select(area_name = Area_name, STCOU, ends_with("D"))

head(selected_columns, n = 5)
```

### Step 2

```{r}
# Convert data into long format
pivoted_data <- selected_columns |>
  pivot_longer(cols=3:12,names_to="Enrollment", values_to ="Enrollment_Value") |>
  select(-STCOU)

head(pivoted_data, n = 5)
```

### Step 3

```{r}
# Separate enrollment variable
long_updated <- pivoted_data |>
   mutate(Survey = substr(Enrollment, 1,7), Year = as.numeric(substr(Enrollment, 8,9))) |>
  mutate(Year=ifelse(Year>80, 1900+Year,2000+Year)) |>
  select(area_name, Survey, Year, Enrollment_Value)

head(long_updated, n = 5)
```

### Step 4

```{r}
# Create two new data sets: county_tibble and state_tibble
county_tibble <- long_updated|>
  filter(grepl(",",area_name)) |> 
  mutate(county=grep(pattern =", \\w\\w", area_name))

class(county_tibble) <- c("county", class(county_tibble))
  
head(county_tibble, n = 10)

state_tibble <- long_updated|>
  filter(!grepl(",",area_name)) 

class(state_tibble) <- c("state", class(state_tibble))
  
head(state_tibble, n = 10)
```

### Step 5

```{r}
# Creating a new variable that describes which state one of these county measurements corresponds to
county_tibble <-county_tibble |>
  mutate(state = substr(area_name, nchar(area_name)-2, nchar(area_name)))
```

### Step 6

```{r}
# Creating a variable called division for non-county level tibble
state_tibble <- state_tibble |>
  mutate(division = case_when(
    area_name %in% c("CONNECTICUT","MAINE","MASSACHUSETTS","NEW HAMPSHIRE","RHODE ISLAND","VERMONT") ~ "New England",
    area_name %in% c("NEW JERSEY","NEW YORK","PENNSYLVANIA") ~ "Mid-Atlantic",
    area_name %in% c("ILLINOIS","INDIANA","MICHIGAN","OHIO","WISCONSIN") ~ "East North Central",
    area_name %in% c("IOWA","KANSAS","MINNESOTA","MISSOURI","NEBRASKA","NORTH DAKOTA","SOUTH DAKOTA") ~ "West North Central",
    area_name %in% c("DELAWARE","DISTRICT OF COLUMBIA","FLORIDA","GEORGIA","MARYLAND","NORTH CAROLINA","SOUTH CAROLINA","VIRGINIA","WEST VIRGINIA") ~ "South Atlantic",
    area_name %in% c("ALABAMA","KENTUCKY","MISSISSIPPI","TENNESSEE") ~ "East South Central",
    area_name %in% c("ARKANSAS","LOUISIANA","OKLAHOMA","TEXAS") ~ "West South Central",
    area_name %in% c("ARIZONA","COLORADO","IDAHO","MONTANA","NEVADA","NEW MEXICO","UTAH","WYOMING") ~ "Mountain",
    area_name %in% c("ALASKA","CALIFORNIA","HAWAII","OREGON","WASHINGTON") ~ "Pacific",
    TRUE ~ "ERROR"
    )
  )
```

## Data Processing Function Writing

```{r}
# Function for reading in code
read_csv_code <- function(filename,column_name){
  library(dplyr)
  library(tidyr)
  first_data <- read.csv(filename)
  return(first_data)
}

# Function for steps 1 and 2  
function_for_steps_1_2 <- function(first_data, column_name){
  selected_columns <- first_data |> 
    select(area_name = Area_name, STCOU, ends_with("D"))
  pivoted_data <- selected_columns |>
    pivot_longer(cols=3:12,names_to=column_name, values_to ="Enrollment_Value") |>
    select(-STCOU)
  print(pivoted_data)
  return(pivoted_data)
}

# Function taking in the output from step 2 and executing step 3
function_for_step_3 <- function(pivoted_data,column_name){
  long_updated <- pivoted_data |>
    mutate(Survey = substr(pivoted_data[[column_name]], 1,7), Year = as.numeric(substr(pivoted_data[[column_name]], 8,9))) |>
    mutate(Year=ifelse(Year>80, 1900+Year,2000+Year)) |>
    select(area_name, Survey, Year, Enrollment_Value)
  return(long_updated)
}

# Function for step 4
function_for_step_4 <- function(long_updated){
  county_tibble <- long_updated|>
    filter(grepl(",",area_name)) |> 
    mutate(county=grep(pattern =", \\w\\w", area_name))
  class(county_tibble) <- c("county", class(county_tibble))
  state_tibble <- long_updated|>
    filter(!grepl(",",area_name)) 
  class(state_tibble) <- c("state", class(state_tibble))
  return(county_tibble, state_tibble)
}

# Function for step 5
function_for_step_5 <- function(county_tibble){
  county_tibble <-county_tibble |>
  mutate(state = substr(area_name, nchar(area_name)-2, nchar(area_name)))
  return(county_tibble)
}

# Function for step 6
function_for_step_6 <- function(state_tibble){
  state_tibble <- state_tibble |>
  mutate(division = case_when(
    area_name %in% c("CONNECTICUT","MAINE","MASSACHUSETTS","NEW HAMPSHIRE","RHODE ISLAND","VERMONT") ~ "New England",
    area_name %in% c("NEW JERSEY","NEW YORK","PENNSYLVANIA") ~ "Mid-Atlantic",
    area_name %in% c("ILLINOIS","INDIANA","MICHIGAN","OHIO","WISCONSIN") ~ "East North Central",
    area_name %in% c("IOWA","KANSAS","MINNESOTA","MISSOURI","NEBRASKA","NORTH DAKOTA","SOUTH DAKOTA") ~ "West North Central",
    area_name %in% c("DELAWARE","DISTRICT OF COLUMBIA","FLORIDA","GEORGIA","MARYLAND","NORTH CAROLINA","SOUTH CAROLINA","VIRGINIA","WEST VIRGINIA") ~ "South Atlantic",
    area_name %in% c("ALABAMA","KENTUCKY","MISSISSIPPI","TENNESSEE") ~ "East South Central",
    area_name %in% c("ARKANSAS","LOUISIANA","OKLAHOMA","TEXAS") ~ "West South Central",
    area_name %in% c("ARIZONA","COLORADO","IDAHO","MONTANA","NEVADA","NEW MEXICO","UTAH","WYOMING") ~ "Mountain",
    area_name %in% c("ALASKA","CALIFORNIA","HAWAII","OREGON","WASHINGTON") ~ "Pacific",
    TRUE ~ "ERROR"
    )
  )
  return(state_tibble)
}

# Function for steps 4, 5, 6
function_for_steps_4_5_6 <- function(long_updated){
  county_tibble <- long_updated|>
    filter(grepl(",",area_name)) |> 
    mutate(county=grep(pattern =", \\w\\w", area_name))
  class(county_tibble) <- c("county", class(county_tibble))
  state_tibble <- long_updated|>
    filter(!grepl(",",area_name)) 
  class(state_tibble) <- c("state", class(state_tibble))
  results5 <- function_for_step_5(county_tibble)
  results6 <- function_for_step_6(state_tibble)
  return(list=c(county_data =results5, state_data =results6))
}
  

# Wrapper function
processing_wrapper <- function(url,column_name){
  result <- read_csv_code(url) |>
    (\(data)function_for_steps_1_2(data,column_name))() |>
    (\(data)function_for_step_3(data,column_name))() |>
    function_for_steps_4_5_6()
  
  return(result)
}

# Test wrapper function on EDU01a and EDU01b data
results1 <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv",'Enrollment')
results2 <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv",'Enrollment')

# Combining Function
CombiningFunction <- function(data1,data2){
  county_data <- bind_rows(data1[1:6],data2[1:6])
  noncounty_data <- bind_rows(data1[7:11],data2[7:11])
    combined <- list(county_data=tibble(county_data),
                     noncounty_data=tibble(noncounty_data))
  return(combined)
}

# Test Combining Function on EDU01a and EDU01b data processed above
Data_Combined<-CombiningFunction(results1,results2)
class(Data_Combined)
class(Data_Combined$county_data)

```

## Writing a Generic Function for Summarizing

### Plot Function for State Data

```{r}
#Plot function for state data
library(ggplot2)
plot.state <- function(df,var_name="state_data.Enrollment_Value"){
  plot_data <- df|> group_by(state_data.division, state_data.Year)|>
    summarize(y_axis=mean(get(var_name))) |>
    filter(state_data.division != 'ERROR') 
   
  print(plot_data)
  ggplot(data=plot_data, aes(x=state_data.Year,y= y_axis,color=state_data.division)) + geom_line() +
    labs(y="Average Enrollment", x="Year", color="Division")
}

plot.state(Data_Combined[[2]],)

```

### Plot Function for County Data

```{r}
#Plot function for county data
plot.county <- function(df,var_name="county_data.Enrollment_Value", state = ' AL' ,order='Top', n=5){
  plot_data <- df |> 
    filter(county_data.state== state) |>
    group_by(county_data.area_name) |>
    summarize(y_axis=mean(get(var_name))) 
   
  if(order=='Top'){
    plot_data2 <- plot_data |>
      arrange(desc(y_axis)) |>
      slice_head(n= n)
  }
  else {
    plot_data2 <- plot_data |>
      arrange(y_axis)|>
      slice_head(n= n)
  }

  print(plot_data2)
  ggplot(data=plot_data2, aes(x=county_data.area_name,y= y_axis/1000)) + geom_point() + labs(y="Average Enrollment (in thousands)", x="Area Name"
  )
}
plot.county <- function(df,var_name="county_data.Enrollment_Value", state = ' AL',group='TOP',
                        n=5){
   plot_data <- df |> filter(county_data.state== state) |>
   group_by(county_data.area_name)|>
     summarize(y_axis=mean(get(var_name))) 
   
   print(plot_data)
   if(group=='TOP'){
     plot_data2 <- plot_data |>
       arrange(desc(y_axis)) |>
       slice_head(n= n) 
   } else {
     plot_data2 <- plot_data |> 
       arrange(y_axis)|>
       slice_head(n= n) 
   }

   plot_data2$county_data.area_name <-factor(plot_data2$county_data.area_name, 
                                             levels= plot_data2$county_data.area_name)
    
   minimum <- floor(min(plot_data2$y_axis))
   maximum <-ceiling(max(plot_data2$y_axis))
   
   print(plot_data2)
   ggplot(data=plot_data2, aes(x=county_data.area_name,y= y_axis, group =1)) + geom_line() +geom_point() + labs(y="Average Enrollment", x="County Name") +scale_y_continuous(limits=c(minimum,maximum),breaks = seq(minimum,maximum,10000))

}

plot.county(Data_Combined[[1]])
plot.county(Data_Combined[[1]],state = ' AZ')
plot.county(Data_Combined[[1]],state = ' PA')

```

## Putting it Together

### Running Original Enrollment Data

```{r}
EDU01a <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv",'Enrollment')
EDU01b <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv",'Enrollment')

EDU01ab<-CombiningFunction(EDU01a, EDU01b)

plot.state(EDU01ab[[2]])
plot.county(EDU01ab[[1]], state =' NC', order = 'Top', n = 20)
plot.county(EDU01ab[[1]], state = ' SC', order = 'Bottom', n = 7)
plot.county(EDU01ab[[1]])
plot.county(EDU01ab[[1]], state = ' PA', order = 'Top', n = 8)

#Orginal two URlS

results1 <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv",'Enrollment')
results2 <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv",'Enrollment')
Data_Combined<-CombiningFunction(results1,results2)
plot.state(Data_Combined[[2]],)
plot.county(Data_Combined[[1]],state = ' NC',group = 'TOP', n=20)
plot.county(Data_Combined[[1]],state = ' SC',group = 'BOTTOM', n=7)
plot.county(Data_Combined[[1]])
plot.county(Data_Combined[[1]],state = ' PA',group = 'TOP', n=8)

#Reading in additional four URLs
resultsA <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv",'Enrollment')
resultsB <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv",'Enrollment')
resultsC <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv",'Enrollment')
resultsD <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv",'Enrollment')

#Run combine function 
CombinationA<-CombiningFunction(resultsA,resultsB)
CombinationB <- CombiningFunction(resultsC,resultsD)
FinalCombination <-CombiningFunction(CombinationA,CombinationB)
plot.state(FinalCombination[[2]],)
plot.county(FinalCombination[[1]],state = ' CA',group = 'TOP', n=15)
plot.county(FinalCombination[[1]],state = ' TX',group = 'TOP', n=4)
plot.county(FinalCombination[[1]])
plot.county(FinalCombination[[1]],state = ' NY',group = 'TOP', n=10)
```

### Run Data Processing Function on Four Other Data Sets

```{r}
PST01a <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv",'Enrollment')
PST01b <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv",'Enrollment')
PST01c <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv",'Enrollment')
PST01d <- processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv",'Enrollment')

PST01ab <- CombiningFunction(PST01a, PST01b)
PST01abc <- CombiningFunction(PST01ab, PST01c)
PST01abcd <- CombiningFunction(PST01abc, PST01d)
```

### Plot Other Data Sets with Plot Function

```{r}
plot.state(PST01abcd[[2]])
plot.county(PST01abcd[[1]], state =' CA', order = 'Top', n = 15)
plot.county(PST01abcd[[1]], state = ' TX', order = 'Top', n = 4)
plot.county(PST01abcd[[1]])
plot.county(PST01abcd[[1]], state = ' NY', order = 'Top', n = 10)
```
